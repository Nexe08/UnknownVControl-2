[gd_scene load_steps=24 format=2]

[ext_resource path="res://Assate/Player.png" type="Texture" id=1]
[ext_resource path="res://Character/Player/GroundDetector.tscn" type="PackedScene" id=2]
[ext_resource path="res://Character/Player/PlayerSprite.gd" type="Script" id=3]
[ext_resource path="res://Character/Player/BulletCounter.tscn" type="PackedScene" id=4]
[ext_resource path="res://Character/Player/Gun.tscn" type="PackedScene" id=5]
[ext_resource path="res://Character/Player/Melee.tscn" type="PackedScene" id=6]
[ext_resource path="res://Character/Player/WeaponHandler.gd" type="Script" id=7]
[ext_resource path="res://Character/Player/HealthBar.tscn" type="PackedScene" id=8]
[ext_resource path="res://Object/Effect/PlayerWalkingPartical.tscn" type="PackedScene" id=9]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D
# Player


var move_speed = 4.5 * 32
var jump_force = 10 * 32
var gravity:= 700
var respawn_position:= Vector2.ZERO

const UP = Vector2.UP

onready var regain_life:= false
onready var is_grounded: bool setget set_is_grounded
onready var velocity:= Vector2.ZERO

onready var GroundDetector = $GroundDetector


func _ready() -> void:
    Global.Player = self
    $BulletCounter.max_value = PlayerData.current_ammo_count


func _physics_process(delta: float) -> void:
#    set_is_grounded(_check_for_ground())
    _check_for_ground()
    _get_input(delta)
    _handel_life_regain(delta)
    
    velocity.y += gravity * delta
    velocity = move_and_slide(velocity, UP)


func _handel_life_regain(delta):
    if move_direction() == 0: # not moving regain life
        if regain_life:
            if PlayerData.current_life < PlayerData.MAX_LIFE:
                PlayerData.current_life += PlayerData.current_life_regain_speed * delta
                $HealthBar.emit_signal(\"value_changed\", PlayerData.current_life)
            else:
                return
    else:
        regain_life = false
        $LifeRegainCooldown.stop()
        $LifeRegainCooldown.start()


# handling jump
func _input(event: InputEvent) -> void:
    if event.is_action_pressed(\"w\") and is_grounded:
            velocity.y = -jump_force
        
    if event.is_action_released(\"w\") and velocity.y < 0:
        velocity.y = lerp(velocity.y, 0, 0.35)


# when take damage or firing gun
func apply_knockback(amount, direction):
    velocity += amount * direction


# reset positon tp given vector
# called by main or map script based on condition
func respawn(_respawn_position=Vector2.ZERO):
    respawn_position = _respawn_position
    $RespawnTimer.stop()
    $RespawnTimer.start()


func disable(value=true):
    set_physics_process(value)
    set_physics_process_internal(value)
    set_process(value)
    set_process_internal(value)


#  called from object that can take damage
func take_damage(_takken_damage, _entity_position = Vector2.ZERO):
    PlayerData.current_life -= _takken_damage
    $HealthBar.emit_signal(\"value_changed\", PlayerData.current_life)
    
    regain_life = false
    
    $LifeRegainCooldown.wait_time = PlayerData.current_life_regain_time
    $LifeRegainCooldown.stop()
    $LifeRegainCooldown.start()
    
    if is_instance_valid(Global.Camera):
        Global.Camera.shake(1, .25)
    
    ScreenEffect.start_slow_time(.2)
    ScreenEffect.start_flash_screen(.05)
    ScreenEffect.start_abration(1, .2)
    ScreenEffect.start_grayscale(.2)
    ScreenEffect.start_freez_screen(.1)


# movement
func _get_input(_dt):
    # move
    velocity.x = lerp(velocity.x, move_speed * move_direction(), _get_accel_and_deaccel())


func move_direction():
#    return -int(Input.is_action_pressed(\"a\")) + int(Input.is_action_pressed(\"d\"))
    return int(Input.get_action_strength(\"d\") - Input.get_action_strength(\"a\"))


# acceleration and deacceleration
func _get_accel_and_deaccel():
    return 0.2 if is_grounded else 0.05


func _check_for_ground():
    if velocity.y >= 0:
        for raycast in GroundDetector.get_children():
            if raycast.is_colliding():
                set_is_grounded(true)
#                return true
            else:
                if is_instance_valid(self):
                    yield(get_tree().create_timer(.2), \"timeout\")
                    set_is_grounded(false)
#                return false
    else:
        set_is_grounded(false)
#        return false


func set_is_grounded(value):
    is_grounded = value


func _on_Gun_bullet_count_updated(value) -> void:
    $BulletCounter.emit_signal(\"value_changed\", value)


func _on_LifeRegainCooldown_timeout() -> void:
    regain_life = true


func _on_RespawnTimer_timeout() -> void:
    global_position = respawn_position
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 4, 6 )

[sub_resource type="Animation" id=3]
resource_name = "idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 3 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 0.95, 1.15 ), Vector2( 1.15, 0.95 ), Vector2( 1, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("WalkPartical:emitting")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=4]
resource_name = "jump"
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 4 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("WalkPartical:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=5]
length = 0.3
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.15 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 4, 3 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("WalkPartical:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="AnimationNodeAnimation" id=6]
animation = "idle"

[sub_resource type="AnimationNodeAnimation" id=7]
animation = "jump"

[sub_resource type="AnimationNodeAnimation" id=8]
animation = "move"

[sub_resource type="AnimationNodeStateMachineTransition" id=9]

[sub_resource type="AnimationNodeStateMachineTransition" id=10]

[sub_resource type="AnimationNodeStateMachineTransition" id=11]

[sub_resource type="AnimationNodeStateMachineTransition" id=12]

[sub_resource type="AnimationNodeStateMachine" id=13]
states/idle/node = SubResource( 6 )
states/idle/position = Vector2( 131, 91 )
states/jump/node = SubResource( 7 )
states/jump/position = Vector2( 274, 91 )
states/move/node = SubResource( 8 )
states/move/position = Vector2( 131, 164 )
transitions = [ "idle", "jump", SubResource( 9 ), "jump", "idle", SubResource( 10 ), "idle", "move", SubResource( 11 ), "move", "idle", SubResource( 12 ) ]
start_node = "idle"

[sub_resource type="AnimationNodeStateMachinePlayback" id=14]

[node name="Player" type="KinematicBody2D"]
collision_layer = 16
script = SubResource( 1 )

[node name="GroundDetector" parent="." instance=ExtResource( 2 )]
visible = false
use_parent_material = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
use_parent_material = true
position = Vector2( 0, -6 )
shape = SubResource( 2 )

[node name="LifeRegainCooldown" type="Timer" parent="."]
one_shot = true

[node name="RespawnTimer" type="Timer" parent="."]
one_shot = true

[node name="VisualBody" type="Node2D" parent="."]
use_parent_material = true
position = Vector2( 0, -6 )

[node name="Sprite" type="Sprite" parent="VisualBody"]
use_parent_material = true
position = Vector2( 0, 6 )
scale = Vector2( 1.03093, 1.06907 )
texture = ExtResource( 1 )
offset = Vector2( 0, -8 )
hframes = 3
vframes = 2
frame = 3
script = ExtResource( 3 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="VisualBody/Sprite"]
anims/idle = SubResource( 3 )
anims/jump = SubResource( 4 )
anims/move = SubResource( 5 )

[node name="AnimationTree" type="AnimationTree" parent="VisualBody/Sprite"]
tree_root = SubResource( 13 )
anim_player = NodePath("../AnimationPlayer")
active = true
parameters/playback = SubResource( 14 )

[node name="WalkPartical" parent="VisualBody/Sprite" instance=ExtResource( 9 )]

[node name="WeaponHandler" type="Node2D" parent="VisualBody"]
scale = Vector2( 0.959931, 1.12021 )
script = ExtResource( 7 )

[node name="Gun" parent="VisualBody/WeaponHandler" instance=ExtResource( 5 )]

[node name="Melee" parent="VisualBody/WeaponHandler" instance=ExtResource( 6 )]
visible = false

[node name="BulletCounter" parent="." instance=ExtResource( 4 )]
margin_top = -38.0
margin_bottom = 26.0

[node name="HealthBar" parent="." instance=ExtResource( 8 )]
margin_left = -48.0
margin_top = -54.0
margin_right = 48.0
margin_bottom = 42.0

[connection signal="timeout" from="LifeRegainCooldown" to="." method="_on_LifeRegainCooldown_timeout"]
[connection signal="timeout" from="RespawnTimer" to="." method="_on_RespawnTimer_timeout"]
[connection signal="bullet_count_updated" from="VisualBody/WeaponHandler/Gun" to="." method="_on_Gun_bullet_count_updated"]

[editable path="VisualBody/WeaponHandler/Gun"]
[editable path="VisualBody/WeaponHandler/Melee"]
